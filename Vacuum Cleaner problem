from collections import deque

# Each state: (M_left, C_left, Boat_side)
# Boat_side: 1 = left, 0 = right
def is_valid(m, c):
    return (m == 0 or m >= c) and (m == 3 or (3 - m) >= (3 - c))

def solve():
    start = (3, 3, 1)  # 3 missionaries, 3 cannibals, boat on left
    goal = (0, 0, 0)
    
    q = deque([(start, [])])
    visited = set()

    moves = [(1,0),(2,0),(0,1),(0,2),(1,1)]  # possible boat moves

    while q:
        (m, c, b), path = q.popleft()
        if (m, c, b) in visited:
            continue
        visited.add((m, c, b))

        path = path + [(m, c, b)]
        if (m, c, b) == goal:
            return path

        for mm, cc in moves:
            if b == 1:  # boat on left -> move to right
                new = (m - mm, c - cc, 0)
            else:       # boat on right -> move to left
                new = (m + mm, c + cc, 1)

            m2, c2, _ = new
            if 0 <= m2 <= 3 and 0 <= c2 <= 3 and is_valid(m2, c2):
                q.append((new, path))
    return None

# Run solver
solution = solve()
if solution:
    for step in solution:
        print(f"Left: {step[0]}M {step[1]}C | Boat: {'Left' if step[2]==1 else 'Right'}")
else:
    print("No solution found")
